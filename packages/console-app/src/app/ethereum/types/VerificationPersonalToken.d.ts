/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface VerificationPersonalTokenInterface extends ethers.utils.Interface {
  functions: {
    "create(address,string,bool)": FunctionFragment;
    "list()": FunctionFragment;
    "modify(address,string,bool)": FunctionFragment;
    "personalTokenIds(address)": FunctionFragment;
    "personalTokens(uint256)": FunctionFragment;
    "purge()": FunctionFragment;
    "setMainContractAddress(address)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "users(uint256)": FunctionFragment;
    "verify(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "list", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "modify",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "personalTokenIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "personalTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "purge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMainContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "verify", values: [string]): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "personalTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "personalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "purge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMainContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "Created(uint256,address,bool)": EventFragment;
    "MainContractSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MainContractSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CreatedEvent = TypedEvent<
  [BigNumber, string, boolean] & {
    tokenId: BigNumber;
    userAddress: string;
    passed: boolean;
  }
>;

export type MainContractSetEvent = TypedEvent<
  [string] & { newAddress: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class VerificationPersonalToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VerificationPersonalTokenInterface;

  functions: {
    create(
      userAddress: string,
      countries: string,
      passed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    list(overrides?: CallOverrides): Promise<[string]>;

    modify(
      userAddress: string,
      countries: string,
      passed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    personalTokenIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    personalTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean] & {
        tokenId: BigNumber;
        userAddress: string;
        countries: string;
        passed: boolean;
      }
    >;

    purge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMainContractAddress(
      _mainContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    verify(target: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  create(
    userAddress: string,
    countries: string,
    passed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  list(overrides?: CallOverrides): Promise<string>;

  modify(
    userAddress: string,
    countries: string,
    passed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  personalTokenIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  personalTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, boolean] & {
      tokenId: BigNumber;
      userAddress: string;
      countries: string;
      passed: boolean;
    }
  >;

  purge(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMainContractAddress(
    _mainContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  verify(target: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    create(
      userAddress: string,
      countries: string,
      passed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    list(overrides?: CallOverrides): Promise<string>;

    modify(
      userAddress: string,
      countries: string,
      passed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    personalTokenIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    personalTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, boolean] & {
        tokenId: BigNumber;
        userAddress: string;
        countries: string;
        passed: boolean;
      }
    >;

    purge(overrides?: CallOverrides): Promise<void>;

    setMainContractAddress(
      _mainContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    verify(target: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Created(uint256,address,bool)"(
      tokenId?: null,
      userAddress?: string | null,
      passed?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean],
      { tokenId: BigNumber; userAddress: string; passed: boolean }
    >;

    Created(
      tokenId?: null,
      userAddress?: string | null,
      passed?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean],
      { tokenId: BigNumber; userAddress: string; passed: boolean }
    >;

    "MainContractSet(address)"(
      newAddress?: string | null
    ): TypedEventFilter<[string], { newAddress: string }>;

    MainContractSet(
      newAddress?: string | null
    ): TypedEventFilter<[string], { newAddress: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    create(
      userAddress: string,
      countries: string,
      passed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    list(overrides?: CallOverrides): Promise<BigNumber>;

    modify(
      userAddress: string,
      countries: string,
      passed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    personalTokenIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    personalTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMainContractAddress(
      _mainContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    verify(target: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      userAddress: string,
      countries: string,
      passed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    list(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modify(
      userAddress: string,
      countries: string,
      passed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    personalTokenIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    personalTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purge(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMainContractAddress(
      _mainContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
